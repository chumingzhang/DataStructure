#include<stack>
empty() 堆栈为空则返回真
pop() 移除栈顶元素
push() 在栈顶增加元素
size() 返回栈中元素数目
top() 返回栈顶元素

eg:
#include<iostream>
#include<stack>
#include<string>
using namespace std;

int main() {
	stack<string> ss;
	string s;
	for(int i = 0; i < 5; ++i) {
		cin >> s;
		ss.push(s);
	}
	
	cout << "堆栈的大小为： " << ss.size() << endl; 
	while(!ss.empty()) {
		cout << ss.top() << endl;
		ss.pop();
	}
	return 0;
}



#include<queue>
push()		//往队尾添加元素
pop()		//从头移除第一个元素
back()		//返回最后一个元素
front()		//返回第一个元素
empty()		//判断是否为空
size()		//返回队列大小
operator =	//重载=赋值操作符

eg：
#include<iostream>
#include<queue>
#include<string>
using namespace std;

int main() {
	queue<string> ss;
	string s;
	for(int i = 0; i < 5; ++i) {
		cin >> s;
		ss.push(s);
	}
	queue<string> temp = ss;
	cout << "队列的大小为： " << temp.size() << endl;
	cout << "队列的尾元素为： " << temp.back() << endl;
	while(!ss.empty()) {
		cout << ss.front() << endl;
		ss.pop();
	}
	return 0;
}



#include<list>
front()		//返回第一个元素
back()		//返回最后一个元素
empty()		//判断是否为空
size()		//返回链表大小
push_front()	//头部插入
push_back()	//尾部插入
pop_front()	//头部删除
pop_back()	//尾部删除
remove()		//ss.remove(i)--移除第一个值为 i 的元素 
erase()		//ss.erase(it)--it为迭代器，移除当前迭代器所指元素
sort()		//排序，默认从小到大 
unique()		//？？
begin()		//返回指向第一个元素的迭代器
end()		//还会末尾的迭代器
重载=赋值操作符

max_size() 	//返回list能容纳的最大元素数量 	

eg:
#include<iostream>
#include<list>
using namespace std;

int main() {
	list<int> ss;
	string s;
	for(int i = 0; i < 5; ++i) {
		ss.push_front(i);
	}
	for(int i = 0; i < 5; ++i) {
		ss.push_back(i + 3);
	}
	list<int> temp;
	temp = ss;
	cout << "队列的大小为：" << temp.size() << endl;
	cout << "队列的头元素为: " << temp.front() << endl;
	cout << "队列的尾元素为: " << temp.back() << endl;
	cout << "队列是否为空: " << temp.empty() << endl;
//	ss.remove(2);	

//ss.remove(i)--移除第一个值为 i 的元素 
//	ss.remove(0);
//	ss.remove(1);
//	ss.remove(3);
//	ss.remove(4);

//移除第 2 、10个元素, 迭代器只有自增、自减、相等、不等操作 
	//相当于第一个元素的指针，移除即delete，不能再用 
//	list<int>::iterator it1 = ss.begin();	
//	it1++;
//	ss.erase(it1);
//	//相当于最后一个空的地址的指针，移除即delete，不能再用 
//	list<int>::iterator it2 = ss.end();	
//	it2--;//指向最后一个元素 
//	ss.erase(it2);

//	ss.sort(); //排序，默认从小到大 

//	ss.unique(); ??
//	cout << ss.max_size() << endl;	//返回list能容纳的最大元素数量 		
	while(!ss.empty()) {
		cout << ss.front() << endl;	//从头部开始遍历 
		ss.pop_front();
//		cout << ss.back() << endl;	//从尾部开始遍历 
//		ss.pop_back();
	}
	return 0;
}